function [RSA_result, distanceMatMatch_4ch, distanceMatMatch_12ch, ...
    distanceMatNeutral_4ch, distanceMatNeutral_12ch] = ...
    simulateRSAwithinConditionTest_spearman(experimental_setup, results, modelName, showBarFig, showImageFig)
% This function tests a difference between Similarity vs Dissimilarity
% for the 4 different combinations WITHIN conditions
% Neutral4, Match 4, Neutral 12, Match 12

% Input:  experimental_setup, results, modelName, showBarFig, showImageFig
% Output: RSA_result, distanceMatMatch, distanceMatNeutral

% simulate RSA conditions
[distanceMatMatch_4ch, distanceMatMatch_12ch, ...
    rsMatch_4ch, psMatch_4ch, rsMatch_12ch, psMatch_12ch] = ...
    simulateRSAwithinConditionSetup_VowelModel_spearman(experimental_setup, results.match_word, 'match', modelName, showImageFig);
[distanceMatNeutral_4ch, distanceMatNeutral_12ch, ...
    rsNeutral_4ch, psNeutral_4ch, rsNeutral_12ch, psNeutral_12ch] = ...
    simulateRSAwithinConditionSetup_VowelModel_spearman(experimental_setup, results.neutral_word, 'neutral', modelName, showImageFig);

RSA_result = [ ...
    mean(rsNeutral_4ch), ...
    mean(rsMatch_4ch), ...
    mean(rsNeutral_12ch), ...
    mean(rsMatch_12ch)];

%% t-tests
if showBarFig

    RSA_result_se = [ ...
    se(rsNeutral_4ch), ...
    se(rsMatch_4ch), ...
    se(rsNeutral_12ch), ...
    se(rsMatch_12ch)];

    figure; bar(RSA_result);
    hold on; errorbar(RSA_result, ...
        RSA_result_se, '.');
    
    title(['RSA: ' modelName]);
    set(gca, 'XTickLabel',{'neutral 4 channel', 'match 4 channel', ...
        'neutral 12 channel', 'match 12 channel'})
    ylabel('mean fisher transformed spearman correlation')
    
    % perform ttest on similiar versus dissimilar values
    % for each of the 4 conditions
    [Hm4ch ,Pm4ch ,CIm4ch ,STATSm4ch ] = ttest(rsMatch_4ch); %#ok<NASGU,ASGLU>
    [Hn4ch ,Pn4ch ,CIn4ch ,STATSn4ch ] = ttest(rsNeutral_4ch); %#ok<NASGU,ASGLU>
    [Hm12ch,Pm12ch,CIm12ch,STATSm12ch] = ttest(rsMatch_12ch); %#ok<NASGU,ASGLU>
    [Hn12ch,Pn12ch,CIn12ch,STATSn12ch] = ttest(rsNeutral_12ch); %#ok<NASGU,ASGLU>
    
    %  [RMAOV2] = RMAOV2(X,alpha)
    % 1. dependent variable
    X1 = [rsMatch_4ch,  ...
        rsNeutral_4ch, ...
        rsMatch_12ch, ...
        rsNeutral_12ch];
    % 2. independent variable 1 noise
    X2 = [ones(1,length(rsMatch_4ch)*2), ones(1,length(rsMatch_4ch)*2)*2];
    % 3. independent variable 2 prior
    X3 = [ones(1,length(rsMatch_4ch)), ones(1,length(rsMatch_4ch))*2, ...
        ones(1,length(rsMatch_4ch)), ones(1,length(rsMatch_4ch))*2];
    % 4. subject
    X4 = [1:length(rsMatch_4ch), 1:length(rsMatch_4ch), 1:length(rsMatch_4ch), 1:length(rsMatch_4ch)];
    X = [X1', X2', X3', X4'];
    RMAOV2(X,0.05)
    
    % display results of the ttests
    resultMat = { ...
        ['neutral 4 ' modelName] num2str(Pn4ch); ...
        ['match 4 ' modelName] num2str(Pm4ch);...
        ['neutral 12 ' modelName] num2str(Pn12ch); ...
        ['match 12 ' modelName] num2str(Pm12ch)};
    disp(resultMat);
end
